<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlaceholderPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Variables

//iFrames
iFrames = 0
iFramesMax = 120

//Movement
SpdNormal = 3.5
SpdFocus = 1.5
GamerSpd = 0 //DON'T TOUCH THIS

//Tap Fire Threshold
FireIn = 5
FireCD = 5
TapFire = 6
TapFireLimit = 6
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pouuuu
effect_create_above(ef_explosion, other.x, other.y, 2, c_red)
effect_create_above(ef_explosion, other.x, other.y, 1, c_yellow)
effect_create_above(ef_explosion, other.x, other.y, 0, c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls and Speed Handling (WASD)
/*
if (!keyboard_check(ord("W")) and !keyboard_check(ord("S")))
    {vspeed = 0}
else if keyboard_check(ord("W"))
    {vspeed = -GamerSpd}
else if keyboard_check(ord("S"))
    {vspeed = GamerSpd}

if (!keyboard_check(ord("A")) and !keyboard_check(ord("D")))
    {hspeed = 0}
else if keyboard_check(ord("A"))
    {hspeed = -GamerSpd}
else if keyboard_check(ord("D"))
    {hspeed = GamerSpd}
    
if keyboard_check(vk_shift) or keyboard_check(ord("L"))
    {GamerSpd = SpdFocus}
else
    {GamerSpd = SpdNormal}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls and Speed Handling (Arrow Keys)

        //Up/Down

if (!keyboard_check(vk_up) and !keyboard_check(vk_down))
    {vspeed = 0}
    
if keyboard_check(vk_down)
    if (place_meeting(x, y + GamerSpd, obj_Wall))
        {vspeed = 0}
    else
        {vspeed = GamerSpd}
        
if keyboard_check(vk_up)
    if (place_meeting(x, y - GamerSpd, obj_Wall))
        {vspeed = 0}
    else
        {vspeed = -GamerSpd}

        //Left/Right
        
if (!keyboard_check(vk_left) and !keyboard_check(vk_right))
    {hspeed = 0}

if keyboard_check(vk_left)
    if (place_meeting(x - GamerSpd, y, obj_Wall))
        {hspeed = 0}
    else
        {hspeed = -GamerSpd}

if keyboard_check(vk_right)
    if (place_meeting(x + GamerSpd, y, obj_Wall))
        {hspeed = 0}
    else
        {hspeed = GamerSpd}
        
        //Focus
    
if keyboard_check(vk_shift) or keyboard_check(ord("L"))
    {GamerSpd = SpdFocus}
else
    {GamerSpd = SpdNormal}

/*  
    //To Wall
if (keyboard_check(ord("A")))
    {
    if (!place_meeting(x - Speed, y, obj_Wall))
        {
        x -= Speed;
        Moving = true;
        sprite_index = SpriteLeft;
        }
    }
if (keyboard_check(ord("D")))
    {
    if (!place_meeting(x + Speed, y, obj_Wall))
        {
        x += Speed;
        Moving = true;
        sprite_index = SpriteRight;
        }
    }
if (keyboard_check(ord("W")))
    {
    if (!place_meeting(x, y - Speed, obj_Wall))
        {
        y -= Speed;
        Moving = true;
        sprite_index = SpriteUp;
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///iFrames
if iFrames &lt;= 0
    {
    iFrames = 0
    image_alpha = 1
    }
else
    {
    iFrames -= 1
    
    if (iFrames mod 3) != 1
        {image_alpha = 0.3}
    else
        {image_alpha = 1}
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Button
/*
if keyboard_check(ord("J")) and (TapFire = TapFireLimit)
    {
    instance_create(x - 7, y, obj_GamerBasicFire)
    instance_create(x + 7, y, obj_GamerBasicFire)
    FireIn -= 1
    TapFire -= 1
    }
    
else if keyboard_check(ord("J"))
    {
    FireIn -= 1
    }
    
    
    
if FireIn &lt;= 0
    {
    instance_create(x - 7, y, obj_GamerBasicFire)
    instance_create(x + 7, y, obj_GamerBasicFire)
    TapFire -= 1
    FireIn = FireCD
    }
    
    
    
if (TapFire &gt; 0) and (TapFire != TapFireLimit) and !keyboard_check(ord("J"))
    {
    FireIn -= 1
    }
    
else if !keyboard_check(ord("J"))
    {
    FireIn = FireCD
    TapFire = TapFireLimit
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Button (Z)
if keyboard_check(ord("Z")) and (TapFire = TapFireLimit)
    {
    instance_create(x - 7, y, obj_GamerBasicFire)
    instance_create(x + 7, y, obj_GamerBasicFire)
    FireIn -= 1
    TapFire -= 1
    }
    
else if keyboard_check(ord("Z"))
    {
    FireIn -= 1
    }
    
    
    
if FireIn &lt;= 0
    {
    instance_create(x - 7, y, obj_GamerBasicFire)
    instance_create(x + 7, y, obj_GamerBasicFire)
    TapFire -= 1
    FireIn = FireCD
    }
    
    
    
if (TapFire &gt; 0) and (TapFire != TapFireLimit) and !keyboard_check(ord("Z"))
    {
    FireIn -= 1
    }
    
else if !keyboard_check(ord("Z"))
    {
    FireIn = FireCD
    TapFire = TapFireLimit
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cheat
if keyboard_check(ord("Q")) and keyboard_check(ord("W")) and keyboard_check(ord("E"))
    {
    mask_index = spr_Empty
    image_alpha = 0.5
    }
else
    {
    mask_index = spr_PlaceholderPlayer
    image_alpha = 1
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(120, 120, string(instance_number(obj_EnemyFire)))
draw_text(140, 140, string(instance_number(obj_GamerBasicFire)))
draw_text(x + 20, y + 20, FireIn)
draw_text(x - 20, y - 20, TapFire)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
